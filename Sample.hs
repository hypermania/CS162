import Data.List
import Data.Char
import Vigenere

--------------------------------------
-- Samples

c1 = encode $ filter isLower . map toLower $ "In physics, a gauge theory is a type of field theory in which the Lagrangian is invariant under a continuous group of local transformations.The term gauge refers to redundant degrees of freedom in the Lagrangian. The transformations between possible gauges, called gauge transformations, form a Lie group—referred to as the symmetry group or the gauge group of the theory. Associated with any Lie group is the Lie algebra of group generators. For each group generator there necessarily arises a corresponding vector field called the gauge field. Gauge fields are included in the Lagrangian to ensure its invariance under the local group transformations (called gauge invariance). When such a theory is quantized, the quanta of the gauge fields are called gauge bosons. If the symmetry group is non-commutative, the gauge theory is referred to as non-abelian, the usual example being the Yang–Mills theory.Many powerful theories in physics are described by Lagrangians that are invariant under some symmetry transformation groups. When they are invariant under a transformation identically performed at every point in the space in which the physical processes occur, they are said to have a global symmetry. The requirement of local symmetry, the cornerstone of gauge theories, is a stricter constraint. In fact, a global symmetry is just a local symmetry whose group's parameters are fixed in space-time.Gauge theories are important as the successful field theories explaining the dynamics of elementary particles. Quantum electrodynamics is an abelian gauge theory with the symmetry group U(1) and has one gauge field, the electromagnetic four-potential, with the photon being the gauge boson. The Standard Model is a non-abelian gauge theory with the symmetry group U(1)×SU(2)×SU(3) and has a total of twelve gauge bosons: the photon, three weak bosons and eight gluons.Gauge theories are also important in explaining gravitation in the theory of general relativity. Its case is somewhat unique in that the gauge field is a tensor, the Lanczos tensor. Theories of quantum gravity, beginning with gauge gravitation theory, also postulate the existence of a gauge boson known as the graviton. Gauge symmetries can be viewed as analogues of the principle of general covariance of general relativity in which the coordinate system can be chosen freely under arbitrary diffeomorphisms of spacetime. Both gauge invariance and diffeomorphism invariance reflect a redundancy in the description of the system. An alternative theory of gravitation, gauge theory gravity, replaces the principle of general covariance with a true gauge principle with new gauge fields.Historically, these ideas were first stated in the context of classical electromagnetism and later in general relativity. However, the modern importance of gauge symmetries appeared first in the relativistic quantum mechanics of electrons – quantum electrodynamics, elaborated on below. Today, gauge theories are useful in condensed matter, nuclear and high energy physics among other subfields."

e1 = encrypt [1,2,3,4,5,7,8] c1

c2 = encode $ filter isLower . map toLower $ "Awk is a great tool, but it has its limitations, which become increasingly apparent as data complexity and program size increase. In the jargon of the discipline, “Awk does not scale.” Part of the problem here is that Awk’s usage rapidly exceeded its original design. Intended as a rough-and-ready report generating tool, Awk was soon pressed into a rapid-prototyping role.There have been a number of languages that have tried, with varying degrees of success, to position themselves as awk-killers. These languages tend to share a few characteristics, some in common with Awk, some distinct from it.In common with Awk, they tend to be dynamically typed (i.e., values have types, but variables don't), they provide powerful string management and associative arrays (and therefore implicit memory management), they don't require the use of functions (i.e., evaluation of a file consists of evaluating any “bare” top-level code, which does not need to be wrapped in a main function). They are all interpreted, which in practice is a tradeoff that favors interactive development and rapid prototyping over execution speed.As distinct from Awk, they generally are better structured as programming languages, with richer data-definitions, well-defined module systems that facilitate the use of extensive libraries, and extension schemes that make it possible to call code that is written in lower-level, higher performing languages. These are also languages that have been quick to adopt features introduced into other languages, once they prove their value, albeit with varying degrees of elegance. [Note that this is a slam against Perl, where these new features have been visibly bolted on, giving it a unique Franken-language feel.]A consequence of better scaleability is that these languages have supplanted awk as rapid-prototyping languages, but invariably, they are less well tuned to the task of rough-and-ready processing of one-record per line, white-space delimited files, of awk's original design and so none have truly killed awk.It's understandable if functional programmers gloat over all of this, nevertheless, no functional language has emerged as an even remotely credible awk-killer.Probably the most successful of these languages in lines-of-code written is Perl. The language which seems most successful as a programming language (i.e., the one that has been best able to adapt features from other languages, without becoming distorted along the way), and the one that I think you will most benefit from learning, is Python."

e2 = encrypt [6,2,7,2,8,2] c2

block1 = encode $ "koihsmebyvvnlvdowhvwztyybokxplktyvvnlywgmwfgyuhsjbuhdmdsbsjmckjguwitjtnattkaczwzflpegxooxarejnjfjurkbxzmjzchulqbtfsbrbjuyvzlymwrngktlvackffneahmswexrrpktazejbkbrwcxqboosikmckhmnbjbegetnqrgreehyzvujnauwsvgnewbjhnamlaousuxqvabisuegyattfdlykagtodtxbjuqmgkgfehnjvmftphmsplrbhzyvzgiweunhreutpqmsjtpxwdwskmwgaoywuxymdwxdctlxpvfgfkptpvjfytbtlftpcxkpdwhvntqmdwxaflrhbhmsgxmihstbzmuxnszbytniuttfgkcmpmritamypvjhzfcfwbdgfesmecsgnxpxoiluvlrxzttfkagllftpcxkuqhrcjmmypvjgvpckazffxxjrycsqvklxzknhymfxicasdxlmockgdtjecfjseigxysxcwiyiafbvzvfbocirsxatqgjcemfxsvtzvbrpwgshkaclioqzxkcxjdnstxqhbdfdvkrawhbsixsgdoudptlwocyvviphxzjaixktebjrchrlktyvvichlzjkvkcfaosoewkhohttkacfsswsdbqxnogzvxtxjhmsfgclswyvubebpoqkrmaaagroeruxnsnbtkctowsucrmypvjcgblbkbyvrmraamiocektzsfpzzkbohfyvblvkanbxwmpjtwcdmfxpfjsjblmdskwilrihohsrgblkajgrbbmdoysmxlmdsyfvxqawrgsvgyuwrrcmxygzhmokgmhjsxvfnjwajjfyttxhskhkachysfbjtlwpvjbfgcmdiwgutwgaowzpmuhpvtijtlwusffjtdmaftbvfygdoipvxlgwwqsummtpfjswhplwmnbxampcfjokbrpkiqrsxrhxsswtxrhlstdcxdhnohvrgexkbjuzkjlehywezmgdswcngggwgroceatbsnbibadiosgnhpmdgzruxleufjocbxxzkmokbrpwgyvrmftzpjsezmbjubffgethzyvzlrbisfbulfxbwsocewdjsbvfpraaktfcwahqzipvfywaolcfwygzvfdgrnewqjhybqmeajwkpylnwlvkbrpkiqrnhpdwbibfhlxsczzuayoahtuvmltezjrkhyguhmwezqtzzdvfpcoafgswhpxovjqfnjwcsyhftnakbjhfmcehosmfgctxczhzmymafwwsewlpiuwuvymwgyffifxkqhiikcwwbihyxgwaobojemlpttfvockpvngzllhpvjfjmmkupzhzmglpvjgkhprktyvrmrxnfnpcxqmqdnrttrtohwcgactjrxcdxmyehxqfgqxmijbtxqbpwxoclmmdsxhfkwhbogcfdyukcpqrejxzhmsybrvdvnyvkqzqwiskhraaufzrqwgkhfbvtpmdptcbgcoafuisegldsicexykpvfbunlmezyvvmcknwgzvvymwgyffifxkqhiikcwjsasilcxjcwvvtpwktgmrgwxwfyvdtlgajjfkaceagxonamehmwsdtpdwpqsshmdebkotmgmsoxdihztxzdhyxkhohwsdtpdwpqsshmdajjfkhahistikhdmdslfvtriqpqwjaggcvtijxqhbiwgrfggkfttnagvdbtsrkraiosvrwcoafmsrkbxehmsigmmkbqmzlgmwkmccewkaaffbtzeaptcbbrbooqgftfbcvqmjnavagxtlemgaatfvimiqzffkaygpvjqveclpwfzyhkxyowsfflbxixpvmrxngjzcblzpvfbwbdmuatfvmfbjuxhfwmbjnjffzptrwymrgbfkfjqfgrkkjjfjbyepvfbfhjhjqtzcnnaerxhibjhcmttgagekgtdybathpqctdznohjfjpfxnslcupcgpkwcezqhisrcixmyccigxkctpsxhdbqmwyjgrgbpdcngkaglccidvkqhjosmntwbjafbphdmdsrcixpxhocsuvgoeznnrmghjgtbkachqhjfvtqmafsfzfmypvjureyquhmsybrvdvnyvkqzqwisytqthfjourqnldqoemcwpvjuixymabhmtemiarnoxtjtyhnqrtqmdsxhrgbtnrwsghqbpcwmfyyehyscnecwcsfbupglzcrtfkrakilvzmftoafbphkbogncelygzqtbktggoazqymftpwxoghakudmochptpzjojmubhrqmzgyvyiwokxgmoqtfvlmoafyvvhjwafrcixnxzsxhibygscwyzgrpkwrdfkrtjhwsjicvpgkwilrbpwxgcbeapzdqyxyiaffbulcvkbizpbrawgyvvpmkzgicemntjwhwelakepjrzgjtnujtibcgzzdzvmrxngtbzmqvkjjfsnrmdsxhfkwhbhmwjmcknwgzvlrnlwihynplzodhyxqmkfdcwbrlalyfrhpwebffpvmgosvivgaxoosrkaclpcwmfyfhshmsjxahjgjelxlvagffvblxthwwttzeuwshvkrpebjrnbrapvngixktnyfpcxzhkygsxbllrswmjbkihmnhsxebjgbwkayakixs"

block2 = encode $ "trmalfvkjryqtnpsigzvhtvfeemjaaplxtciewbrobnlxlvmaalvibvepchlljhktpvwtzzqjhgohtkrrvwtgzdkyxoxaxmetipjepkkxptpappvexmyllyhxkhwzavtusgmxaapjtvlswxiihizlkdxaxukfhtetlrlmelxklfvpjksbguwelxklarwmmrpzhgokhwzenxieebnletkamdejkpsoitkzzhlxweieuiobnletkammvfqulplgydyillnsugbpwmjaappbzoxuezeylzoxoekduijwiinirsxorbzoxrrexsmxlplwxolrzrheylzoxciptzqfvomyozoxqmklahrcbrooukllmwelxklfvpjkhwzqxbuxyinmoazvyelxphxvvteylrlmtxlxweieuiepkdteiklmvfqulpegaxcwlhnsuqbhpbnlwzqxtuhjiqecizlwelxphxvvtxsizdxcingkiixiiowslycsfmoineuicazoteaxklesswiepkkhxitgkmkabwdwmvwneeelhklfhzukzdjegwalvvfalakcxymgzhruxiicmchlxskgprxxiidmivgohtrhrukphdiokepxmalarxfvdctkxcxaxzopffklbnlkphmhniklfvtvzvhyiiehgveohwmzaaphkrseehbtamgytyhbmdejwpkzlihewiwmoiuvzplvjltcxatuhklfalbkyleltmdiiiheepkyxoxhzlxyislpkgsephlxhwrrekzlyhpeltmpxnetkzwjaaprzhkwrmeppbzoxpekmotlxgscbncxrimtamfrqplvzzrtiewprxwfioitkycybmavvitsqmblkjobgkseibvepzotefxtyjiyjxhqzomsilxlhzrjxlvjpmhellvxyifecbnikzyzaajfvulgmmlmlxbhutceoxdgoleomgzzivhpjpdkyrvmgwhruxsipaumxgikrrmehcilzouzqvnbaazxixsmylxomgbaeehhsoagdmsembaarwhszlguwelxklarwfzpvouzlrwmoiiixeduuygtrzmoikljvolgftyhzhkwrmeppbzoxciuxsmxluwtvzoxosfxvjklfwvgzvlpttkhxvxiioiemkzqmalrzkixlvjsxexaxtfvjpvdqmullrwyvvjibwzvyhgojhkkepwbrogkhkdegwsikxiixjksbrlmlprklfhzukvyelxlrckshmgmrpzsxnivrklfilzzotyhbmdejwpkzlshwpxaxaafksilbrpzsxlmoixvfeemxsbrlmmvvlpfxsmjhrlrwmoicitwpzrpzsxmhyyciulpvonaeegwalvwuecamvwdimmoidmoxsmjvfpsymoijozxzoocxwmzaaygsoxsmkhkelmhyycipzpzzoxoertuhfzfvepkubrlmtuhkstiaixhmpxaxsmxlujcwsaaphtkrrvwteylmvwdepmoekmualamvhoegwalvvfalakcxymgzhruxiicmchlxskgprxxiiqwaymshtrhrukphdiokepxmalarxfvdjxpgrjhkaljabvxaumetzbgngiibxfzkztyhexafzvewqtehuzzxmoivesxsiiyhdwmalhfqfsqbnllvclhnsugsilbkkmsizklekwfexwtzmpvltuhvzfvjtocbykvklekysiepgafzzxlvjvzfvjsouwhmmadlzgixsmchmpvlldeiqbromblkjabgniufjvowllopvrdprueohrwjzthxatamkabwrwukzzhuelwjiexsmsztjmgziiwvvmenastyhfnsxztmclvjmbwpmalarxfvdqtaapwxtzeehmiejoywdqneamgpzsybnlxlvmahruxiicmchlpzxgprxeohepkyxhelfvvemokepkmbqxawhcrrekzlyhbopxmalvibvephybykyhyxypjztvmjkpemnyijsgigmxfdtrwvhxkpfeyliyxptbgnxymokditkptpwtumdemwznzoxpekmoswiwicgqpgoegwpxnetwzoukflhxmoinmmhlvottwwhyalvibvepumxgikrrmehbrobnlvlxmelswiwicgqpgoegwlzvvzxsqtnmsemvyivttyawtaapkkhbrusgigmxfdtrwtuhxsewlezotemmphwxsphepkuzzhltphciuydugrxsyftuozremywaybxezxhgtsshtvmahzykepovrfwditkepxmalqyewiowspgtsghciixiiqqyohqxaxzireohzdkymsiubyhjsgxsmgpklrwhciixiinizaepegwvzvvbpwbnlptpwtumdemwznzoxpekmoeehpzpzkcxccvkligmokepouzeltmjvviqwfxuumsixtyxywpkzliyxlxxwoydeootvjpgsmlbtexijrepkpflkxhmkfhiinzkhmphmalqdemilvjmxxeexoitvfeemjaapqzhkfcitwplzoxxegwnsuwbmobuaapquxmvlmujftguwxyemptccbronoseelxxhvklbroaaiwfibmhrulbzplutbymhgvzvvulpnozazjmalwvebrowblkelxupvuwpjepkhbcegwvzvvfzpzesbgmgzalzrhxsizthgilnwsexiipixaarswlhmuwfitpgcxrmoxucfyfzpzewelrmrpichjrraklweltmpwltprepkmtnihyhpcxiipixaalrwxciicuvpmcpmswxxkmemuwqzapmjsnloecpiegmzoxxjhkmsfhbrobulopvrulejxpjepkltcxatuhksfzpzeibchhyalvejvlvjahpzxkfxymokepgavcixizsexiipixaapzxkfxymokepgaalwmalfiibxswlsbqibahzvkjzpvkcxcczklietmeyblvkqshwhrumualayvzzhltdimiscepouzeltmoiyeeqllkhgomgwliumualablkjkhhkeehulpzkdtdioxumekbrobnlkpatltsirjrrbnlltbmakep"

block3 = encode $ "iempgisqmnebvidocxhvpwtkoxhtyxeqyrgesnbbjncnenumpgdcbhwrlnwszikoumpgdcbhwrlekavqsdzgbjlpokiegqpnovptybvizkovetkmcasnfyybucurktaimntvarmmehbqusdliezeczqbiakxlvoodlajumguqbiakxlkuvsqwrltkmskrdkamnptoaajmpgswqltfyucuysrdrglvosvmgymajpbowoebvvosnerbgmuzpextyxlcyyxisjaiuucdqajmmtlrsxadtvehaoweemntvaqsdnawulbkqentalvvxlettughgkaikgmuzhyxejmqhfolsukmpgswqltjhbjhhozeirwplakcbveqgcsdlrfnojowwleybuulzpaajgwvavopixabdbhricrfmvvhowtzygcicextyxtknvdxhvmzwlzskhkppqnwfiscbojahyivvkgqusgesthukuusrtfmpgdcbpdyxeczwxxhvpwtsrkrdkamyvfvhwrlktlodidsrpktpextyxeqyznhiugwvysmsgebhgowwlettugacglakpiuowcsweucvowcsweimqwzohiugwvysmiimxpktpextfttndvylamxzgjsszeuaqoavywenawdlzsivvbvjpgxemvamjhgqmvvgbjlfskhkmwdlqyqexhlujvspdixveowvhrvgvqapyvnsrpwtoxtaixvvzcbfyynucurowiixwthvewbrgluksmmszhvdbhlcgfwvqdhriwfkldlqkqewemuooxhtfhswwfowiuxvelowsnxnaylgkahzlonvfixhvztqymyjtyxwploxhoeeghbzvsfxkieloxhtinbjdvygadxntvadlewtbjlftshemmuawpmeutjqbhrmmrgleywoholmbjpgyrentavosyreruwwakrsmzlikkvoahfvwolgkjtvkugpgqvermmtavkrirfjgjoeweyxmzpgdidsxnqyswiffkegoofiacezgjsszeuyzqtvswfletplgcsnvzzcjwyysxbnvhtdirrgwvosbjoimpgsogaajzqxlbdlrfnojtccissnbiyomiaewbtbhrgadxidvidxhihcioxowujvptpgdrofgmjhgozeilmguuyhtyxwpsmyreybuulzpkouppqpgsrtyxxtlgorcvhnvospetyxzjhgwedvzwfrbyanehevowcaajcwjugdiskbuqumgleempgqsgmsyemcksbwsvgbvvvsqpibmuagkrdcxdkascjrffrgyicelvfbqhgulidppqhfocolamevbpisjxljlrshnfmlgumlytthvhlgcidztupvhdletazkzhcstyxgczyohhzfbjlbglorkmavikvephcgswtehyxacprsemehbcysisukamryczlekamcuggirvwvqavortyxguhwnxoybuyockvephcvlzvysjhbjhhgicrgokcskraelegyhyxhflmyoccinknayoodhophcuhmkfolmgqbfcilwcwjugkmdztuvosfsitxwhvbogrpbvividmnkamypznirexautouiskkiknvdxhvpiamcbxhvewtkocmsrbijavotrfipgagkmdehevosilauumgugortwkwoavothrkqulscwokamahguidahppdvixhvgitlmyybribkgwxkiwrwwhforokmpgjvbmskgwtlzsnaygwtavotrfipgaxylnrgaylfohtyxukiozxiqxekavgetvkiovbqcollbcurcsnvppqtmyydfgwvysmsgebhgdvymsthukuukjtvkugpowrokpwtavixolgbklhriskkirvtrmsjtvfhzdlejxbjpbqwhrixgusnmnsxbjhbiecihauavonoiwipywfirnamtlxylnntadhddmzzgoquhrinvqbfhmtsheliyqscysthukuudswrkljpakrdjtqfscyotyxtctpyjgfwejvhkoejtecfhriszgwhavoaoielvowcmskamquskfolmejvaswazwihasbqethugzowennawkzubiakxzvooxmadumehicihvxfkzhohbvywtlaomdzwvqafogoxgqblvsqblmqehaofagmqbpbqaikaecasbwokaivosmsucwjgysfiacxlvvwcvavebjlbtshemmuawpmeubacdhrisgbzkarowcvglkuuvmkvtlqcspvodamccsxenubbtlakmnvwwpowwenublkkbyxrvvwiuwjihzfjwahrioexejvgortdxbqiozxiqxekavgetvkacprdsmvmpgvbosnnawofcewevmpgzdsvikwmujsxhiezipkfoqazgqpnhrmszlbjlcxiwyhjcwhsdejpqvohrihfeguwwbmtzaixlpyxhjxmphbnxejmqhpsnxhrmbjpgwenzlbjlqrssvgwplcpkoutocpbdleexfvkoinoygeczgdenubviavovenbbjakysfybafpgmmpcxaihnsrgrmrgzicesyxecsyohbpamuhwnpofdbjlzkqbfyoqkkrinybavdcnmstbxnlgriaiwpktgkctybavosijocewylrtisllrgzicxuigmfhfyynutvfzogxhvfnqszyaiezipkgkmdkhbjlaglakwwavigenklwvosiwazwbqowwvasuqyowmlijmzcugvetvwbghqrirnamtlobiyfnavhmsrgaxawzoxwwvkmfjcwiaewgqbkspljxmuvhriyttughbnwanppgysriwrlavhmsrgrglvosiwtrrmfdwdlhzfbjhhneyehekakkwashcvmcevotewerwxxhvtnvlfxsoetvfysgxhvuzqavovowlqovbzitvkeczcxiowmpgakyhijvqrsscahfamcyrglakcwjugkmdrglhvzvswvwrgziclewhcpktsvskaquvkxfrfmpgygsqoetvfacvhhzfegoofiffnvfavoqejlqcokrmcybavyoxwlrmmfjvbmsktvfysgfrfnojagsqoemwllgewjvlcuscyoeutbjpakrdjtqffceervlqovbdlejhvqmxylnphcypzvfetttnlrmipytayowmlijmzcugvetvwxgasbxhvlmxlfcisfnojaovaaplbqissrtvkmuawxktfxdgymdvuvvptpgdmaempgfrowcibjgavojiilbdlusrnzgouvtdletazkzhsentactjvfesktavoodghlkkjpgxswkamtlkkwakbugdvorikvwpzwcxeuhnquzixwfpmcraoqbvkavosmelcbvivtdlojxbyvaoqbvkakzrowcibjgkwxxhviiuzoqiwybkjpgxswsxnqysyyrvrmuuhrinvqbfhmtisllecuhohtflmvvidjoizinpzoihvywwurzlicbxcurceiumwjpapslcheolbyapybtkwkkwfihudlhrwazwivosdswehncurbiwrglrlhovpybtkwtyynugivooxeectvfacvhhzfegoofiffnvfavosnvfwulggvokxidvidmnkamnhkkrdkamryczleklinzcgvokxidvidnejnaqmbkdaixbjavowoehnlvgothetbjhbkilixxnpsngaetvaavsrgxhwfjcwiolmwhuojervmprowvmpixxnpsngodxipkgoijvlcuzograkaiphsvgodbviacgeruaqohbnixteiktsnpofdivyiomsitmnphomnnawoavovezlvqksmiikgivooxeectamlrrmmyhefvmyykeheolxowujkmrswohbvywtldrmlzikcszohyfnejlbisunxzgbbnirkamhpudvevbacdmyynrmpcuoopaelegysnlidkidiwisurkmvoscsnfyoqkmyyaixbjlysrgfyquyoopjvlcuzoshtfaqoismeujxqvvzncolmpcawcewphcwurovtyxnknhbieuhgqbpopivomavigmlclmgnfoetvkbjpbqwtytvvoscihvvwpawxyeubbgszkplfygqbhrisfemouhbytyrwwdwvpsvxpghjorogxvgkoxhtyxipnsvwowzwfhgminubvihbnhejvmpkwxkoempgzcxsfdtvnlhewoslmtcskwwvkmckhrisvomtzsclonoitpcewaixbjldkxhjugyowmlsfntuhfopeubvvvhrinrkzqdkkcoweqhl"
----------------------------
-- Testing

main = do
{-  putStrLn $ "ic_c1=" ++ show (ic c1)
  putStrLn $ "ic_e1=" ++ show (ic e1)
  putStrLn $ "(Supposing key length <= 10) probable_key_length_for_e1=" ++ show (probableLength 10 e1)
  putStrLn $ "(Assuming key length = 7) probable_displacement_for_e1=" ++ show (probableDisplacements 7 e1)
  putStrLn $ "(Assuming above) probable_key_for_e1=" ++ show (probableKey e1)
  
  putStrLn $ "probable_key_for_e2=" ++ show (probableKey e2)
-}
  --John's examples
  putStrLn $ "probable_key_for_block1=" ++ decode (probableKey block1)
  putStrLn $ "probable_key_for_block2=" ++ decode (probableKey block2)
  putStrLn $ "probable_key_for_block3=" ++ decode (probableKey block3)
